// hide default arrows for the input type number 
@mixin inputNumberAppiarancePrevent {
    @if & {
        &::-webkit-outer-spin-button,
        &::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        &[type='number'] {
            -moz-appearance: textfield;
        }
    }

    @else {
        ::-webkit-outer-spin-button,
        ::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        [type='number'] {
            -moz-appearance: textfield;
        }
    }
}

@mixin n($n) {
    &:nth-child(#{$n}) {
        @content;
    }
}

@mixin is-hover($hover: true) {
    @if $hover {
        @media(any-hover: hover) {
            @content;
        }
    }
    @else {
        @media (any-hover: none) {
            @content;
        }
    }
}

@mixin on-event($events: null, $self: false) {
    // Example: @include on-event([hover, focus])
    // Example: @include on-event([no-hover]) - for touch devices without pointing devices
    // https://drafts.csswg.org/mediaqueries-4/#any-input

    @if $self {
        @content;
    }

    @if $events == null {
        @include is-hover {
            &:hover {
                @content;
            }
        }
    }

    @else {
        @each $event in $events {
            @if $event == hover {
                @include is-hover {
                    &:#{$event} {
                        @content;
                    }
                }
            }

            @else if &event == no-hover {
                @include is-hover(false) {
                    @content;
                }
            }

            @else {
                &:#{$event} {
                    @if $event == focus {
                        outline: none;
                    }

                    @content;
                }
            }
        }
    }
}

@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin disableScroll($breakpoint: false) {
    @include media-breakpoint-down($breakpoint) {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow-y: scroll;
    }
}

@mixin navbarBackdrop($opened, $breakpoint: false) {
    @if $breakpoint {
        display: none;
    }

    @include media-breakpoint-down($breakpoint) {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: color(primary, 0.5);
        border: none;
        display: block;
        visibility: hidden;
        opacity: 0;

        @include when-inside($opened) {
            visibility: visible;
            opacity: 1;
            transition: opacity 0.1s linear 0.1s;
        }
    }
}

@mixin makeFormFieldPrimary() {
    .select2-selection--single,
    .select-custom,
    .input {
        border-color: color(border);
    }
}

@mixin makeFormFieldSecondary() {
    .select2-selection--single,
    .select-custom,
    .input {
        border-color: color(transparent);
    }
}

@mixin imageContainer($ratio: 100%, $position: relative) {
    position: $position;

    @if unit($ratio) != '%' {
        $ratio: round(percentage($ratio));
    }

    &::before {
        content: '';
        display: block;
        padding-top: $ratio;
    }

    img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}

@mixin line-clamp(
    $lines: 1,
    $line-height: $line-height-base,
    $font-size: $font-size-base,
    $is-height: null
) {
    // $is-height: true - calculate min-height
    // $is-height: false - min-height auto
    // $is-height: null - not displayed
    -webkit-box-orient: vertical;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    overflow: hidden;

    @if $is-height == true {
        min-height: $line-height * $font-size * $lines;
    } @else if $is-height == false {
        min-height: auto
    }
}

@mixin no-gutter-container($lg: false) {
    @if $lg {
        margin-left: (-$grid-gutter-width-lg);
        margin-right: (-$grid-gutter-width-lg);
    }
    @else {
        margin-left: (-$grid-gutter-width-xs);
        margin-right: (-$grid-gutter-width-xs);
    }
}
